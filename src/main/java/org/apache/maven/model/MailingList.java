// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 1.8.3,
// any modifications will be overwritten.
// ==============================================================

package org.apache.maven.model;

/**
 * This element describes all of the mailing lists associated with
 * a project. The
 *         auto-generated site references this information.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class MailingList
    implements java.io.Serializable, java.lang.Cloneable, org.apache.maven.model.InputLocationTracker
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * 
     *             
     *             The name of the mailing list.
     *             
     *           
     */
    private String name;

    /**
     * 
     *             
     *             The email address or link that can be used to
     * subscribe to
     *             the mailing list.  If this is an email address,
     * a
     *             <code>mailto:</code> link will automatically be
     * created
     *             when the documentation is created.
     *             
     *           
     */
    private String subscribe;

    /**
     * 
     *             
     *             The email address or link that can be used to
     * unsubscribe to
     *             the mailing list.  If this is an email address,
     * a
     *             <code>mailto:</code> link will automatically be
     * created
     *             when the documentation is created.
     *             
     *           
     */
    private String unsubscribe;

    /**
     * 
     *             
     *             The email address or link that can be used to
     * post to
     *             the mailing list.  If this is an email address,
     * a
     *             <code>mailto:</code> link will automatically be
     * created
     *             when the documentation is created.
     *             
     *           
     */
    private String post;

    /**
     * The link to a URL where you can browse the mailing list
     * archive.
     */
    private String archive;

    /**
     * Field otherArchives.
     */
    private java.util.List<String> otherArchives;

    /**
     * Field locations.
     */
    private java.util.Map<Object, InputLocation> locations;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method addOtherArchive.
     * 
     * @param string
     */
    public void addOtherArchive( String string )
    {
        getOtherArchives().add( string );
    } //-- void addOtherArchive( String )

    /**
     * Method clone.
     * 
     * @return MailingList
     */
    public MailingList clone()
    {
        try
        {
            MailingList copy = (MailingList) super.clone();

            if ( this.otherArchives != null )
            {
                copy.otherArchives = new java.util.ArrayList<String>();
                copy.otherArchives.addAll( this.otherArchives );
            }

            if ( copy.locations != null )
            {
                copy.locations = new java.util.LinkedHashMap( copy.locations );
            }

            return copy;
        }
        catch ( java.lang.Exception ex )
        {
            throw (java.lang.RuntimeException) new java.lang.UnsupportedOperationException( getClass().getName()
                + " does not support clone()" ).initCause( ex );
        }
    } //-- MailingList clone()

    /**
     * Get the link to a URL where you can browse the mailing list
     * archive.
     * 
     * @return String
     */
    public String getArchive()
    {
        return this.archive;
    } //-- String getArchive()

    /**
     * 
     * 
     * @param key
     * @return InputLocation
     */
    public InputLocation getLocation( Object key )
    {
        return ( locations != null ) ? locations.get( key ) : null;
    } //-- InputLocation getLocation( Object )

    /**
     * Get the name of the mailing list.
     * 
     * @return String
     */
    public String getName()
    {
        return this.name;
    } //-- String getName()

    /**
     * Method getOtherArchives.
     * 
     * @return List
     */
    public java.util.List<String> getOtherArchives()
    {
        if ( this.otherArchives == null )
        {
            this.otherArchives = new java.util.ArrayList<String>();
        }

        return this.otherArchives;
    } //-- java.util.List<String> getOtherArchives()

    /**
     * Get the email address or link that can be used to post to
     *             the mailing list.  If this is an email address,
     * a
     *             <code>mailto:</code> link will automatically be
     * created
     *             when the documentation is created.
     * 
     * @return String
     */
    public String getPost()
    {
        return this.post;
    } //-- String getPost()

    /**
     * Get the email address or link that can be used to subscribe
     * to
     *             the mailing list.  If this is an email address,
     * a
     *             <code>mailto:</code> link will automatically be
     * created
     *             when the documentation is created.
     * 
     * @return String
     */
    public String getSubscribe()
    {
        return this.subscribe;
    } //-- String getSubscribe()

    /**
     * Get the email address or link that can be used to
     * unsubscribe to
     *             the mailing list.  If this is an email address,
     * a
     *             <code>mailto:</code> link will automatically be
     * created
     *             when the documentation is created.
     * 
     * @return String
     */
    public String getUnsubscribe()
    {
        return this.unsubscribe;
    } //-- String getUnsubscribe()

    /**
     * Method removeOtherArchive.
     * 
     * @param string
     */
    public void removeOtherArchive( String string )
    {
        getOtherArchives().remove( string );
    } //-- void removeOtherArchive( String )

    /**
     * Set the link to a URL where you can browse the mailing list
     * archive.
     * 
     * @param archive
     */
    public void setArchive( String archive )
    {
        this.archive = archive;
    } //-- void setArchive( String )

    /**
     * 
     * 
     * @param key
     * @param location
     */
    public void setLocation( Object key, InputLocation location )
    {
        if ( location != null )
        {
            if ( this.locations == null )
            {
                this.locations = new java.util.LinkedHashMap<Object, InputLocation>();
            }
            this.locations.put( key, location );
        }
    } //-- void setLocation( Object, InputLocation )

    /**
     * Set the name of the mailing list.
     * 
     * @param name
     */
    public void setName( String name )
    {
        this.name = name;
    } //-- void setName( String )

    /**
     * Set the link to alternate URLs where you can browse the list
     * archive.
     * 
     * @param otherArchives
     */
    public void setOtherArchives( java.util.List<String> otherArchives )
    {
        this.otherArchives = otherArchives;
    } //-- void setOtherArchives( java.util.List )

    /**
     * Set the email address or link that can be used to post to
     *             the mailing list.  If this is an email address,
     * a
     *             <code>mailto:</code> link will automatically be
     * created
     *             when the documentation is created.
     * 
     * @param post
     */
    public void setPost( String post )
    {
        this.post = post;
    } //-- void setPost( String )

    /**
     * Set the email address or link that can be used to subscribe
     * to
     *             the mailing list.  If this is an email address,
     * a
     *             <code>mailto:</code> link will automatically be
     * created
     *             when the documentation is created.
     * 
     * @param subscribe
     */
    public void setSubscribe( String subscribe )
    {
        this.subscribe = subscribe;
    } //-- void setSubscribe( String )

    /**
     * Set the email address or link that can be used to
     * unsubscribe to
     *             the mailing list.  If this is an email address,
     * a
     *             <code>mailto:</code> link will automatically be
     * created
     *             when the documentation is created.
     * 
     * @param unsubscribe
     */
    public void setUnsubscribe( String unsubscribe )
    {
        this.unsubscribe = unsubscribe;
    } //-- void setUnsubscribe( String )

}
