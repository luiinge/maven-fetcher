// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 2.0.0,
// any modifications will be overwritten.
// ==============================================================

package org.apache.maven.model;

/**
 * Contains the plugins management informations for the project.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class PluginConfiguration
    extends PluginContainer
    implements java.io.Serializable, Cloneable
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Default plugin information to be made available for
     * reference by projects
     *             derived from this one. This plugin configuration
     * will not be resolved or bound to the
     *             lifecycle unless referenced. Any local
     * configuration for a given plugin will override
     *             the plugin's entire definition here.
     */
    private PluginManagement pluginManagement;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method clone.
     * 
     * @return PluginConfiguration
     */
    public PluginConfiguration clone()
    {
        try
        {
            PluginConfiguration copy = (PluginConfiguration) super.clone();

            if ( this.pluginManagement != null )
            {
                copy.pluginManagement = (PluginManagement) this.pluginManagement.clone();
            }

            return copy;
        }
        catch ( Exception ex )
        {
            throw (RuntimeException) new UnsupportedOperationException( getClass().getName()
                + " does not support clone()" ).initCause( ex );
        }
    } //-- PluginConfiguration clone()

    /**
     * Get default plugin information to be made available for
     * reference by projects
     *             derived from this one. This plugin configuration
     * will not be resolved or bound to the
     *             lifecycle unless referenced. Any local
     * configuration for a given plugin will override
     *             the plugin's entire definition here.
     * 
     * @return PluginManagement
     */
    public PluginManagement getPluginManagement()
    {
        return this.pluginManagement;
    } //-- PluginManagement getPluginManagement()

    /**
     * Set default plugin information to be made available for
     * reference by projects
     *             derived from this one. This plugin configuration
     * will not be resolved or bound to the
     *             lifecycle unless referenced. Any local
     * configuration for a given plugin will override
     *             the plugin's entire definition here.
     * 
     * @param pluginManagement a pluginManagement object.
     */
    public void setPluginManagement( PluginManagement pluginManagement )
    {
        this.pluginManagement = pluginManagement;
    } //-- void setPluginManagement( PluginManagement )

    
            
    /**
     * @see Object#toString()
     */
    public String toString()
    {
        return "PluginConfiguration {" + super.toString() + "}";
    }
            
          
}
